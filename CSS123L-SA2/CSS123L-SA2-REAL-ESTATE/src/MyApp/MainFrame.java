package MyApp;

import javax.swing.table.*;

import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.List; 

import javax.swing.*;    

import MyLibs.*;
import MyLibs.Search.*;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Jack
 */
public class MainFrame extends javax.swing.JFrame {
        Block block1 = new Block("Block 1", 1);
        Block block2 = new Block("Block 2", 2);
        Block block3 = new Block("Block 3", 3);
        Block block4 = new Block("Block 4", 4);
        Block block5 = new Block("Block 5", 5);
        Block[] blocks = {block1, block2, block3, block4, block5};
        boolean contFlag = true;

        String[] blockList = {"Block 1", "Block 2", "Block 3", "Block 4", "Block 5"};
        StatusFactory statusFactory = new StatusFactory();
        LotFactory lotFactory = new LotFactory();

        
        

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        setTitle("Real-Estate Sales and Management System");
        setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
        

        initComponents();
        customInitComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusSearchGroup = new javax.swing.ButtonGroup();
        tabbedPane = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        ManagementTablePane = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        LotTable = new javax.swing.JTable();
        MainManagementPane = new javax.swing.JPanel();
        ReserveButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        ManagementSearchPane = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        SearchButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        maxSizeField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        minSizeField = new javax.swing.JTextField();
        blockNumFieldSearch = new javax.swing.JComboBox<>();
        minPriceField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        maxPriceField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        AddLotButton = new javax.swing.JButton();
        EditLotButton = new javax.swing.JButton();
        DeleteLotButton = new javax.swing.JButton();
        SoldButton = new javax.swing.JButton();
        ForSaleButton = new javax.swing.JButton();
        LotInfoPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        lotNumberInfo = new javax.swing.JLabel();
        blockNumberInfo = new javax.swing.JLabel();
        lotSizeInfo = new javax.swing.JLabel();
        lotPriceInfo = new javax.swing.JLabel();
        lotStatusInfo = new javax.swing.JLabel();
        SaleStartDateInfo = new javax.swing.JLabel();
        lotBuyerInfo = new javax.swing.JLabel();
        lotReservedInfo = new javax.swing.JLabel();
        lotPurchaseDateInfo = new javax.swing.JLabel();
        tableRefreshButton = new javax.swing.JButton();
        ReportPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ReportTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        numBlocks = new javax.swing.JLabel();
        numBlocksReport = new javax.swing.JLabel();
        numTotalLots = new javax.swing.JLabel();
        block1Lots = new javax.swing.JLabel();
        block2Lots = new javax.swing.JLabel();
        block3Lots = new javax.swing.JLabel();
        block4Lots = new javax.swing.JLabel();
        block5Lots = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneStateChanged(evt);
            }
        });

        LotTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lot Number", "Block Number", "Lot Size", "Lot Price", "Lot Status"
            }
        ));
        LotTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(LotTable);
        if (LotTable.getColumnModel().getColumnCount() > 0) {
            LotTable.getColumnModel().getColumn(0).setResizable(false);
            LotTable.getColumnModel().getColumn(1).setResizable(false);
            LotTable.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout ManagementTablePaneLayout = new javax.swing.GroupLayout(ManagementTablePane);
        ManagementTablePane.setLayout(ManagementTablePaneLayout);
        ManagementTablePaneLayout.setHorizontalGroup(
            ManagementTablePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ManagementTablePaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1002, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        ManagementTablePaneLayout.setVerticalGroup(
            ManagementTablePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ManagementTablePaneLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(119, Short.MAX_VALUE))
        );

        ReserveButton.setText("Mark as Reserved");
        ReserveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReserveButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Location (Block)");

        jLabel3.setText("Price (PHP)");

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Size (m^2)");

        jLabel6.setText("Max");

        jLabel7.setText("Min");

        minSizeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minSizeFieldActionPerformed(evt);
            }
        });

        blockNumFieldSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Block 1", "Block 2", "Block 3", "Block 4", "Block 5", " " }));
        blockNumFieldSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockNumFieldSearchActionPerformed(evt);
            }
        });

        minPriceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minPriceFieldActionPerformed(evt);
            }
        });

        jLabel8.setText("Min");

        maxPriceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxPriceFieldActionPerformed(evt);
            }
        });

        jLabel9.setText("Max");

        statusSearchGroup.add(jRadioButton1);
        jRadioButton1.setText("Reserved");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        statusSearchGroup.add(jRadioButton2);
        jRadioButton2.setText("Purchased");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        statusSearchGroup.add(jRadioButton3);
        jRadioButton3.setText("For Sale");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ManagementSearchPaneLayout = new javax.swing.GroupLayout(ManagementSearchPane);
        ManagementSearchPane.setLayout(ManagementSearchPaneLayout);
        ManagementSearchPaneLayout.setHorizontalGroup(
            ManagementSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ManagementSearchPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ManagementSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ManagementSearchPaneLayout.createSequentialGroup()
                        .addGroup(ManagementSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(ManagementSearchPaneLayout.createSequentialGroup()
                                .addGroup(ManagementSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(blockNumFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(ManagementSearchPaneLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(minSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35))
                    .addGroup(ManagementSearchPaneLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(minPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))))
            .addGroup(ManagementSearchPaneLayout.createSequentialGroup()
                .addGroup(ManagementSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ManagementSearchPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton3))
                    .addGroup(ManagementSearchPaneLayout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(SearchButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ManagementSearchPaneLayout.setVerticalGroup(
            ManagementSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ManagementSearchPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ManagementSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(minSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blockNumFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ManagementSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(maxPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ManagementSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton3))
                .addGap(9, 9, 9)
                .addComponent(SearchButton)
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ManagementSearchPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ManagementSearchPane, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(120, 120, 120))
        );

        AddLotButton.setText("Add Lot");
        AddLotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddLotButtonActionPerformed(evt);
            }
        });

        EditLotButton.setText("Edit Lot");
        EditLotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditLotButtonActionPerformed(evt);
            }
        });

        DeleteLotButton.setText("Delete Lot");
        DeleteLotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteLotButtonActionPerformed(evt);
            }
        });

        SoldButton.setText("Mark as Sold");
        SoldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SoldButtonActionPerformed(evt);
            }
        });

        ForSaleButton.setText("Mark for Sale");
        ForSaleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ForSaleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MainManagementPaneLayout = new javax.swing.GroupLayout(MainManagementPane);
        MainManagementPane.setLayout(MainManagementPaneLayout);
        MainManagementPaneLayout.setHorizontalGroup(
            MainManagementPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainManagementPaneLayout.createSequentialGroup()
                .addGroup(MainManagementPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainManagementPaneLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(DeleteLotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(MainManagementPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(MainManagementPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ReserveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(MainManagementPaneLayout.createSequentialGroup()
                                .addComponent(AddLotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(EditLotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(SoldButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ForSaleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(34, 34, 34))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        MainManagementPaneLayout.setVerticalGroup(
            MainManagementPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainManagementPaneLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(MainManagementPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddLotButton)
                    .addComponent(EditLotButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DeleteLotButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ReserveButton)
                .addGap(2, 2, 2)
                .addComponent(SoldButton)
                .addGap(3, 3, 3)
                .addComponent(ForSaleButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jLabel4.setText("Info");

        lotNumberInfo.setText("Lot Number:");

        blockNumberInfo.setText("Block Number:");

        lotSizeInfo.setText("Lot Size: ");

        lotPriceInfo.setText("Lot Price:");

        lotStatusInfo.setText("Lot Status: ");

        SaleStartDateInfo.setText("Sale Start Date: ");

        lotBuyerInfo.setText("Lot Buyer: ");

        lotReservedInfo.setText("Lot Reservee: ");

        lotPurchaseDateInfo.setText("Purchase Date: ");

        javax.swing.GroupLayout LotInfoPanelLayout = new javax.swing.GroupLayout(LotInfoPanel);
        LotInfoPanel.setLayout(LotInfoPanelLayout);
        LotInfoPanelLayout.setHorizontalGroup(
            LotInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LotInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LotInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(lotNumberInfo)
                    .addComponent(blockNumberInfo)
                    .addComponent(lotSizeInfo)
                    .addComponent(lotPriceInfo)
                    .addComponent(lotStatusInfo)
                    .addComponent(SaleStartDateInfo)
                    .addComponent(lotBuyerInfo)
                    .addComponent(lotReservedInfo)
                    .addComponent(lotPurchaseDateInfo))
                .addContainerGap(126, Short.MAX_VALUE))
        );
        LotInfoPanelLayout.setVerticalGroup(
            LotInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LotInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lotNumberInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blockNumberInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lotSizeInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lotPriceInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lotStatusInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SaleStartDateInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lotBuyerInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lotPurchaseDateInfo)
                .addGap(2, 2, 2)
                .addComponent(lotReservedInfo)
                .addContainerGap(139, Short.MAX_VALUE))
        );

        tableRefreshButton.setText("Refresh");
        tableRefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableRefreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainManagementPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ManagementTablePane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LotInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(tableRefreshButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(LotInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(tableRefreshButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ManagementTablePane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(MainManagementPane, javax.swing.GroupLayout.PREFERRED_SIZE, 584, Short.MAX_VALUE))
                .addContainerGap())
        );

        tabbedPane.addTab("Management", jPanel4);

        ReportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lot Number", "Block Number", "Lot Size", "Lot Price", "Status"
            }
        ));
        jScrollPane1.setViewportView(ReportTable);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel5.setText("Report");

        numBlocks.setText("Number of Blocks : ");

        numTotalLots.setText("Number of Total Lots : ");

        block1Lots.setText("Block 1: ");

        block2Lots.setText("Block 2: ");

        block3Lots.setText("Block 3: ");

        block4Lots.setText("Block 4: ");

        block5Lots.setText("Block 5: ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(numBlocks)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(numBlocksReport))
                    .addComponent(numTotalLots)
                    .addComponent(block3Lots)
                    .addComponent(block4Lots)
                    .addComponent(block5Lots)
                    .addComponent(block2Lots)
                    .addComponent(block1Lots))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numBlocks)
                    .addComponent(numBlocksReport))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(numTotalLots)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(block1Lots)
                .addGap(6, 6, 6)
                .addComponent(block2Lots)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(block3Lots)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(block4Lots)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(block5Lots)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout ReportPanelLayout = new javax.swing.GroupLayout(ReportPanel);
        ReportPanel.setLayout(ReportPanelLayout);
        ReportPanelLayout.setHorizontalGroup(
            ReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1273, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        ReportPanelLayout.setVerticalGroup(
            ReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(153, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Report", ReportPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1568, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 627, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void AddLotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddLotButtonActionPerformed
    JFrame addLotFrame = new JFrame("Add Lot");
    addLotFrame.setSize(500, 300);
    addLotFrame.setLayout(new GridLayout(6, 2));
    
    // Labels
    JLabel lotNumberLabel = new JLabel("Lot Number:");
    JLabel blockNumberLabel = new JLabel("Block Number:");
    JLabel lotSizeLabel = new JLabel("Lot Size:");
    JLabel lotPriceLabel = new JLabel("Lot Price:");
    JLabel lotStatusLabel = new JLabel("Lot Status:");
    
    // Text fields
    JTextField lotNumberField = new JTextField();
    JTextField lotSizeField = new JTextField();
    JTextField lotPriceField = new JTextField();

    JComboBox<String> blockNumberField = new JComboBox<>(blockList);

    String[] statusChoices = {"For Sale", "Reserved", "Sold"};
    JComboBox<String> lotStatusField = new JComboBox<String>(statusChoices);
    
    // Add components to frame
    addLotFrame.add(lotNumberLabel);
    addLotFrame.add(lotNumberField);
    addLotFrame.add(blockNumberLabel);
    addLotFrame.add(blockNumberField);
    addLotFrame.add(lotSizeLabel);
    addLotFrame.add(lotSizeField);
    addLotFrame.add(lotPriceLabel);
    addLotFrame.add(lotPriceField);
    addLotFrame.add(lotStatusLabel);
    addLotFrame.add(lotStatusField);
    
    JButton submitButton = new JButton("Submit");
    addLotFrame.add(submitButton);
        
        // Action listener for submit button
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // Retrieve input values
                String lotNumber = lotNumberField.getText();
                Block blockNum = getBlock(blockNumberField.getSelectedIndex());
                String lotSize = lotSizeField.getText();
                String lotPrice = lotPriceField.getText();
                int lotStatus = lotStatusField.getSelectedIndex();
                
                try {
                    double parsedLotSize = Double.parseDouble(lotSize);
                    double parsedLotPrice = Double.parseDouble(lotPrice);
                    Status parsedLotStatus = statusFactory.createStatus(lotStatus);

                    Lot lotObject = lotFactory.createLot(parsedLotPrice);
                    lotObject.setLotNumber(lotNumber);
                    lotObject.setBlockNum(blockNum);
                    lotObject.setLotNumber(lotNumber);
                    lotObject.setLotSize(parsedLotSize);
                    lotObject.setLotPrice(parsedLotPrice);
                    lotObject.setLotStatus(parsedLotStatus);
                    
                    parsedLotStatus = openStatusSpecificDialog(parsedLotStatus);
                    lotObject.setLotStatus(parsedLotStatus);


                    if (!contFlag) {
                        return;
                    }

                    if (!blockNum.checkDuplicateLot(lotObject)) {
                        JOptionPane.showMessageDialog(addLotFrame, "Duplicate lot. Enter another lot number.");
                        return;
                    } else {blockNum.assignLot(lotObject);}

                    
                    Object[] rowData = {lotNumber, blockNum, parsedLotSize, parsedLotPrice, parsedLotStatus};
                    DefaultTableModel model = (DefaultTableModel) LotTable.getModel();
                    model.addRow(rowData);
                    
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(addLotFrame, "Please enter valid numbers for Size and Price.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            } catch (Exception e) {
                JOptionPane.showMessageDialog(addLotFrame, "Error: " + e , "Error", JOptionPane.ERROR_MESSAGE); 
                return;
            }
            
            // Close the frame after submission
            addLotFrame.dispose();
        }
    
    });
    
    addLotFrame.setVisible(true);
}//GEN-LAST:event_AddLotButtonActionPerformed



private Status openStatusSpecificDialog(Status lotStatus) {
    JDialog statusDialog = new JDialog((Frame) null, "Enter Additional Information", true);
    statusDialog.setSize(400, 200);
    statusDialog.setLayout(new GridLayout(3, 2));


    if (lotStatus.toString().equals("For Sale")) {
        JLabel startSaleDateLabel = new JLabel("Start Sale Date: (yyyy-MM-dd)");
        JTextField startSaleDateField = new JTextField();
        statusDialog.add(startSaleDateLabel);
        statusDialog.add(startSaleDateField);

        JButton submitButton = new JButton("Submit");
        statusDialog.add(submitButton);

        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    Date startSaleDate = new SimpleDateFormat("yyyy-MM-dd").parse(startSaleDateField.getText());
                    ((StatusForSale) lotStatus).setStartSaleDate(startSaleDate);
                    statusDialog.dispose();
                } catch (ParseException e) {
                    JOptionPane.showMessageDialog(statusDialog, "Enter a valid date...", "Date Format Error", JOptionPane.ERROR_MESSAGE);
                    contFlag = false;
                    return;
                }
                contFlag = true; 
            }
            
        });

    } else if (lotStatus.toString().equals("Reserved")) {
        JLabel reserveeNameLabel = new JLabel("Reservee Name:");
        JTextField reserveeNameField = new JTextField();
        JLabel reserveDateLabel = new JLabel("Reserve Date: (yyyy-MM-dd)");
        JTextField reserveDateField = new JTextField();

        statusDialog.add(reserveeNameLabel);
        statusDialog.add(reserveeNameField);
        statusDialog.add(reserveDateLabel);
        statusDialog.add(reserveDateField);

        JButton submitButton = new JButton("Submit");
        statusDialog.add(submitButton);

        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    String reserveeName = reserveeNameField.getText();
                    Date reserveDate = new SimpleDateFormat("yyyy-MM-dd").parse(reserveDateField.getText());
                    ((StatusReserved) lotStatus).setReserveeName(reserveeName);
                    ((StatusReserved) lotStatus).setReserveDate(reserveDate);
                    
                    statusDialog.dispose();
                } catch (ParseException e) {
                    contFlag = false; 
                    JOptionPane.showMessageDialog(statusDialog, "Enter a valid date...", "Date Format Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                contFlag = true;
            }
        });

    } else if (lotStatus.toString().equals("Purchased")) {
        JLabel purchaserNameLabel = new JLabel("Purchaser Name:");
        JTextField purchaserNameField = new JTextField();
        JLabel purchaseDateLabel = new JLabel("Purchase Date: (yyyy-MM-dd)");
        JTextField purchaseDateField = new JTextField();

        statusDialog.add(purchaserNameLabel);
        statusDialog.add(purchaserNameField);
        statusDialog.add(purchaseDateLabel);
        statusDialog.add(purchaseDateField);

        JButton submitButton = new JButton("Submit");
        statusDialog.add(submitButton);

        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    String purchaserName = purchaserNameField.getText();
                    Date purchaseDate = new SimpleDateFormat("yyyy-MM-dd").parse(purchaseDateField.getText());
                     ((StatusPurchased)lotStatus).setPurchaserName(purchaserName);
                    ((StatusPurchased)lotStatus).setPurchaseDate(purchaseDate);
                    statusDialog.dispose();
                } catch (ParseException e) {
                    contFlag = false;
                    JOptionPane.showMessageDialog(statusDialog, "Enter a valid date...", "Date Format Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                contFlag = true; 
            }
        });
        statusDialog.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                // Do not mark as completed, just close the dialog
                contFlag = false;
                statusDialog.dispose();
            }
        });
    }

    statusDialog.setVisible(true);
    return lotStatus;
}


    // TO-DO: CONFIRMATION MESSAGE BEFORE DELETING
    private void DeleteLotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteLotButtonActionPerformed

        int lotRow = LotTable.getSelectedRow();
        if (lotRow == -1) {
        // No row is selected
        JOptionPane.showMessageDialog(null, "Please select a lot to delete.");
        return;
        }
        String lotNumber = (String) LotTable.getValueAt(lotRow, 0);
        Block blockNumber = (Block) LotTable.getValueAt(lotRow, 1);

        System.out.println("Block Number: " + blockNumber);
        System.out.println("LotNumber: " + lotNumber);

        int response = JOptionPane.showOptionDialog(
            null,
            "Are you sure you want to delete this lot?",
            "Delete Confirmation",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            null,
            null
        );

        if (response == JOptionPane.NO_OPTION) {
            return;
        }

        ArrayList<Lot> lots = blockNumber.getLots();
        for (int i=0; i<lots.size(); i++) {
            if (lots.get(i).getLotNumber() == lotNumber) {
                lots.remove(i);
            }
        }

        DefaultTableModel model = (DefaultTableModel) LotTable.getModel();
        model.removeRow(lotRow);

    }//GEN-LAST:event_DeleteLotButtonActionPerformed

    private void EditLotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditLotButtonActionPerformed
        
        Object[] rowData = new Object[LotTable.getColumnCount()];
        int lotRow = LotTable.getSelectedRow();
        if (lotRow == -1) {
        // No row is selected
        JOptionPane.showMessageDialog(null, "Please select a lot to delete.");
        return;
        }
        for (int i=0; i<LotTable.getColumnCount(); i++) {
            rowData[i] = LotTable.getValueAt(lotRow, i);
        }
        JFrame editLotFrame = new JFrame("Edit Lot");
    editLotFrame.setSize(500, 300);
    editLotFrame.setLayout(new GridLayout(6, 2));
    
    // Labels
    JLabel lotNumberLabel = new JLabel("Lot Number:");
    JLabel blockNumberLabel = new JLabel("Block Number:");
    JLabel lotSizeLabel = new JLabel("Lot Size:");
    JLabel lotPriceLabel = new JLabel("Lot Price:");
    JLabel lotStatusLabel = new JLabel("Lot Status:");
    
    // Text fields
    JTextField lotNumberField = new JTextField(rowData[0].toString());
    JTextField lotSizeField = new JTextField(rowData[2].toString());
    JTextField lotPriceField = new JTextField(rowData[3].toString());
    

    JComboBox<String> blockNumberField = new JComboBox<>(blockList);
    blockNumberField.setSelectedItem(rowData[1]);

    String[] statusChoices = {"For Sale", "Reserved", "Sold"};
    JComboBox<String> lotStatusField = new JComboBox<String>(statusChoices);
    lotStatusField.setSelectedItem(rowData[4]);


    // Add components to frame
    editLotFrame.add(lotNumberLabel);
    editLotFrame.add(lotNumberField);
    editLotFrame.add(blockNumberLabel);
    editLotFrame.add(blockNumberField);
    editLotFrame.add(lotSizeLabel);
    editLotFrame.add(lotSizeField);
    editLotFrame.add(lotPriceLabel);
    editLotFrame.add(lotPriceField);
    editLotFrame.add(lotStatusLabel);
    editLotFrame.add(lotStatusField);
    
    JButton submitButton = new JButton("Submit");
    editLotFrame.add(submitButton);
        
        // Action listener for submit button
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // Retrieve input values
                String lotNumber = lotNumberField.getText();
                Block blockNum = getBlock(blockNumberField.getSelectedIndex());
                String lotSize = lotSizeField.getText();
                String lotPrice = lotPriceField.getText();
                int lotStatus = lotStatusField.getSelectedIndex();
                
                try {
                    double parsedLotSize = Double.parseDouble(lotSize);
                    double parsedLotPrice = Double.parseDouble(lotPrice);
                    Status parsedLotStatus = statusFactory.createStatus(lotStatus);
                    

                    for (Lot lot : blockNum.getLots()) {
                        if (lot.getLotNumber().equals(rowData[0])) {
                            lot.setLotNumber(lotNumber);

                            if (lot.getLotNumber().equals(rowData[0])) {
                                lot.setBlockNum(blockNum);
                                lot.setLotNumber(lotNumber);
                                lot.setLotSize(parsedLotSize);
                                lot.setLotPrice(parsedLotPrice);
                                lot.setLotStatus(parsedLotStatus);
                                parsedLotStatus = openStatusSpecificDialog(parsedLotStatus);

                                lot.setLotStatus(parsedLotStatus);
                            } else if (!blockNum.checkDuplicateLot(lot)) {
                                JOptionPane.showMessageDialog(editLotFrame, "Duplicate lot. Enter another lot number.");
                                return;
                            }

                        }
                    }
                    
                    
                    DefaultTableModel model = (DefaultTableModel) LotTable.getModel();
                    model.setValueAt(lotNumber, lotRow, 0);
                    model.setValueAt(blockNum, lotRow, 1);
                    model.setValueAt(parsedLotSize, lotRow, 2);
                    model.setValueAt(parsedLotPrice, lotRow, 3);
                    model.setValueAt(parsedLotStatus, lotRow, 4);
                    
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(editLotFrame, "Please enter valid numbers for Size and Price.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            } catch (Exception e) {
                JOptionPane.showMessageDialog(editLotFrame, "Error: " + e , "Error", JOptionPane.ERROR_MESSAGE); 
                return;
            }
            
            // Close the frame after submission
            editLotFrame.dispose();
        }
    
    });
    
    editLotFrame.setVisible(true);
    updateDetailsOnSelection();

    }//GEN-LAST:event_EditLotButtonActionPerformed

    private void ReserveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReserveButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) LotTable.getModel();
        int lotRow = LotTable.getSelectedRow();
        if (lotRow == -1) {
            // No row is selected
            JOptionPane.showMessageDialog(null, "Please select a lot to delete.");
            return;
        }
        String lotNumber = (String) LotTable.getValueAt(lotRow, 0);
        Block blockNumber = (Block) LotTable.getValueAt(lotRow, 1);

        for (Lot lot : blockNumber.getLots()) {
            if (lotNumber.equals(lot.getLotNumber())) {
                try {
                    Status reservedStatus = new StatusReserved();
                    reservedStatus = openStatusSpecificDialog(reservedStatus);

                    if (!contFlag) {
                        return;
                    }

                    lot.setLotStatus(reservedStatus);
                    
                    model.setValueAt(reservedStatus, lotRow, 4);

                } 
                catch (Exception e) {
                    System.out.println("Error: " + e );
                }
                
            }
        }
        updateDetailsOnSelection();

    }//GEN-LAST:event_ReserveButtonActionPerformed

    private void SoldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SoldButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) LotTable.getModel();
        int lotRow = LotTable.getSelectedRow();
        if (lotRow == -1) {
            // No row is selected
            JOptionPane.showMessageDialog(null, "Please select a lot to delete.");
            return;
        }
        String lotNumber = (String) LotTable.getValueAt(lotRow, 0);
        Block blockNumber = (Block) LotTable.getValueAt(lotRow, 1);

        for (Lot lot : blockNumber.getLots()) {
            if (lotNumber.equals(lot.getLotNumber())) {
                Status purchasedStatus = new StatusPurchased();
                purchasedStatus = openStatusSpecificDialog(purchasedStatus);

                if (!contFlag) {
                        return;
                }

                lot.setLotStatus(purchasedStatus);

                model.setValueAt(purchasedStatus, lotRow, 4);
            }
        }

        updateDetailsOnSelection();
    }//GEN-LAST:event_SoldButtonActionPerformed

    private void ForSaleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ForSaleButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) LotTable.getModel();
        int lotRow = LotTable.getSelectedRow();
        if (lotRow == -1) {
            // No row is selected
            JOptionPane.showMessageDialog(null, "Please select a lot to delete.");
            return;
        }
        String lotNumber = (String) LotTable.getValueAt(lotRow, 0);
        Block blockNumber = (Block) LotTable.getValueAt(lotRow, 1);

        for (Lot lot : blockNumber.getLots()) {
            if (lotNumber.equals(lot.getLotNumber())) {
                Status forSaleStatus = new StatusForSale();
                forSaleStatus = openStatusSpecificDialog(forSaleStatus);

                if (!contFlag) {
                        return;
                }

                lot.setLotStatus(forSaleStatus);
                model.setValueAt(forSaleStatus, lotRow, 4);
            }
        }

        updateDetailsOnSelection();
    }//GEN-LAST:event_ForSaleButtonActionPerformed

    private void minSizeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minSizeFieldActionPerformed
        
    }//GEN-LAST:event_minSizeFieldActionPerformed

    private void minPriceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minPriceFieldActionPerformed
        
    }//GEN-LAST:event_minPriceFieldActionPerformed

    private void maxPriceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxPriceFieldActionPerformed
        
    }//GEN-LAST:event_maxPriceFieldActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        List<Lot> lots = new ArrayList<>();
        for (Block block : blocks) {
            for (Lot lot : block.getLots()) {
                lots.add(lot);
            }
        }

        Search search = new LotSearch();

        if (!minSizeField.getText().isEmpty() && !maxSizeField.getText().isEmpty()) {
            double minSize = Double.parseDouble(minSizeField.getText());
            double maxSize = Double.parseDouble(maxSizeField.getText());
            search = new SizeFilter(search, minSize, maxSize);
        }

        if (!blockNumFieldSearch.getSelectedItem().equals("None")) {
            String blockNumber = (String) blockNumFieldSearch.getSelectedItem();
            search = new BlockFilter(search, blockNumber);
        }

        if (!minPriceField.getText().isEmpty() && !maxPriceField.getText().isEmpty()) {
            double minPrice = Double.parseDouble(minPriceField.getText());
            double maxPrice = Double.parseDouble(maxPriceField.getText());
            search = new PriceFilter(search, minPrice, maxPrice);
        }

        String selectedButton = getSelectedButtonText(statusSearchGroup);
        if (selectedButton != null) {
            search = new StatusFilter(search, selectedButton);
        }

        List<Lot> filteredlotsList = search.search(lots);
        

        DefaultTableModel tableModel = (DefaultTableModel) LotTable.getModel();
        tableModel.setRowCount(0);
        for (Lot lot : filteredlotsList) {
            Object[] rowData = {
                        lot.getLotNumber(),
                        lot.getBlockNum(),
                        lot.getLotSize(),
                        lot.getLotPrice(),
                        lot.getLotStatus()
                    };
            tableModel.addRow(rowData);
        }
        
    }
//GEN-LAST:event_SearchButtonActionPerformed
public String getSelectedButtonText(ButtonGroup buttonGroup) {
        for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();

            if (button.isSelected()) {
                return button.getText();
            }
        }

        return null;
}
    private void blockNumFieldSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockNumFieldSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_blockNumFieldSearchActionPerformed

    private void tableRefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableRefreshButtonActionPerformed
        DefaultTableModel tableModel = (DefaultTableModel) LotTable.getModel();
        tableModel.setRowCount(0);
        for (Block block : blocks) {
            for (Lot lot : block.getLots()) {
                    Object[] rowData = {
                        lot.getLotNumber(),
                        lot.getBlockNum(),
                        lot.getLotSize(),
                        lot.getLotPrice(),
                        lot.getLotStatus()
                    };
                tableModel.addRow(rowData);
            }
        }
    }//GEN-LAST:event_tableRefreshButtonActionPerformed

    private void tabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {                                                                               
            JTabbedPane pane = (JTabbedPane) evt.getSource();
            int selectedIndex = pane.getSelectedIndex();
            
            if (selectedIndex == 1) {
                populateReportTable();
                populateReportStats();
            }                    
    }
        // Method to populate the report table
        private void populateReportTable() {
            
            DefaultTableModel reportTableModel = (DefaultTableModel) ReportTable.getModel();
            reportTableModel.setRowCount(0); // Clear existing rows

            for (Block block : blocks) {
                for (Lot lot : block.getLots()) {
                    Object[] rowData = {
                        lot.getLotNumber(),
                        lot.getBlockNum(),
                        lot.getLotSize(),
                        lot.getLotPrice(),
                        lot.getLotStatus()
                    };
                    reportTableModel.addRow(rowData);
                }
            }
        }

        private void populateReportStats() {
            numBlocks.setText("Number of Blocks: " + blockList.length);
            numTotalLots.setText("Number of Total Lots: " + Block.allLots.size());
            block1Lots.setText("Block 1: " + block1.getLots().size());
            block2Lots.setText("Block 2: " + block2.getLots().size());
            block3Lots.setText("Block 3: " + block3.getLots().size());
            block4Lots.setText("Block 4: " + block4.getLots().size());
            block5Lots.setText("Block 5: " + block5.getLots().size());
        }
                                       


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });



        

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddLotButton;
    private javax.swing.JButton DeleteLotButton;
    private javax.swing.JButton EditLotButton;
    private javax.swing.JButton ForSaleButton;
    private javax.swing.JPanel LotInfoPanel;
    private javax.swing.JTable LotTable;
    private javax.swing.JPanel MainManagementPane;
    private javax.swing.JPanel ManagementSearchPane;
    private javax.swing.JPanel ManagementTablePane;
    private javax.swing.JPanel ReportPanel;
    private javax.swing.JTable ReportTable;
    private javax.swing.JButton ReserveButton;
    private javax.swing.JLabel SaleStartDateInfo;
    private javax.swing.JButton SearchButton;
    private javax.swing.JButton SoldButton;
    private javax.swing.JLabel block1Lots;
    private javax.swing.JLabel block2Lots;
    private javax.swing.JLabel block3Lots;
    private javax.swing.JLabel block4Lots;
    private javax.swing.JLabel block5Lots;
    private javax.swing.JComboBox<String> blockNumFieldSearch;
    private javax.swing.JLabel blockNumberInfo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lotBuyerInfo;
    private javax.swing.JLabel lotNumberInfo;
    private javax.swing.JLabel lotPriceInfo;
    private javax.swing.JLabel lotPurchaseDateInfo;
    private javax.swing.JLabel lotReservedInfo;
    private javax.swing.JLabel lotSizeInfo;
    private javax.swing.JLabel lotStatusInfo;
    private javax.swing.JTextField maxPriceField;
    private javax.swing.JTextField maxSizeField;
    private javax.swing.JTextField minPriceField;
    private javax.swing.JTextField minSizeField;
    private javax.swing.JLabel numBlocks;
    private javax.swing.JLabel numBlocksReport;
    private javax.swing.JLabel numTotalLots;
    private javax.swing.ButtonGroup statusSearchGroup;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JButton tableRefreshButton;
    // End of variables declaration//GEN-END:variables


    // USER-DEFINED
    public Block getBlock(int comboIndex) {
        switch (comboIndex) {
            case 0: return block1;
            case 1: return block2;
            case 3: return block3;
            case 4: return block4;
            case 5: return block5;
            default: throw new IllegalArgumentException("Invalid index");
        }
    }

    // info not working yet
    private void customInitComponents() {
        LotTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateDetailsOnSelection();
            }
    });
    DefaultTableModel tableModel = (DefaultTableModel) LotTable.getModel();
    for (int i = 0; i < blocks.length; i++) {
            Block block = blocks[i];
            for (int j = 1; j <= 2; j++) {
                String lotNumber = "L" + j + "B" + (i + 1);
                double lotSize = 100.0 + (j * 10);
                double lotPrice = 1000.0 + (j * 100);
                Status lotStatus = statusFactory.createStatus((i + j) % 3); // Random status

                Lot lotObject = lotFactory.createLot(lotPrice);
                lotObject.setLotNumber(lotNumber);
                lotObject.setBlockNum(block);
                lotObject.setLotSize(lotSize);
                lotObject.setLotPrice(lotPrice);
                lotObject.setLotStatus(lotStatus);

                Object[] rowData = {
                        lotNumber,
                        block,
                        lotSize,
                        lotPrice,
                        lotStatus
                    };
                block.assignLot(lotObject);
                
                tableModel.addRow(rowData);
            }
        }
    System.out.println(Block.allLots);
}

// Method to update details on selection
private void updateDetailsOnSelection() {
    
    int selectedRow = LotTable.getSelectedRow();
    if (selectedRow != -1) {
        // Get the values from the selected row
        String lotNumber = (String) LotTable.getValueAt(selectedRow, 0);
        Block block = (Block) LotTable.getValueAt(selectedRow, 1);
        double lotSize = (Double) LotTable.getValueAt(selectedRow, 2);
        double lotPrice = (Double) LotTable.getValueAt(selectedRow, 3);

        for (Lot lot : block.getLots()) {
            if (lot.getLotNumber() == lotNumber) {
                Status lotLocalStatus = lot.getLotStatus();
                if (lotLocalStatus.toString().equals("For Sale")) {
                    lotReservedInfo.setText("Lot Reservee: ");
                    lotPurchaseDateInfo.setText("Purchase Date: ");
                    lotBuyerInfo.setText("Lot Buyer: ");
                    StatusForSale forSaleStatus = (StatusForSale) lotLocalStatus;
                    lotStatusInfo.setText("Lot Status: " + forSaleStatus.toString());
                    SaleStartDateInfo.setText("Sale Start Date: " + forSaleStatus.formatDate());
                } else if (lotLocalStatus.toString().equals("Reserved")) {
                    SaleStartDateInfo.setText("Sale Start Date: ");
                    lotPurchaseDateInfo.setText("Purchase Date: ");
                    lotBuyerInfo.setText("Lot Buyer: ");
                    
                    StatusReserved reservedStatus = (StatusReserved) lotLocalStatus;
                    lotStatusInfo.setText("Lot Status: " + reservedStatus.toString());
                    lotReservedInfo.setText("Lot Reservee: " + reservedStatus.getReserveeName());
                } else {
                    SaleStartDateInfo.setText("Sale Start Date: ");
                    lotReservedInfo.setText("Lot Reservee: ");
                    StatusPurchased purchasedStatus = (StatusPurchased) lotLocalStatus;
                    lotStatusInfo.setText("Lot Status: " + purchasedStatus.toString());
                    lotPurchaseDateInfo.setText("Purchase Date: " + purchasedStatus.formatDate());
                    lotBuyerInfo.setText("Lot Buyer: " + purchasedStatus.getPurchaserName());
                }
            }
        }

        

        // Update the text fields with the selected row values
        lotNumberInfo.setText("Lot Number: " + lotNumber);
        blockNumberInfo.setText("Block Number: " + block); // Convert block to string representation
        lotSizeInfo.setText("Lot Size: " + String.valueOf(lotSize));
        lotPriceInfo.setText("Lot Price: " + String.valueOf(lotPrice));
    }
}


}
